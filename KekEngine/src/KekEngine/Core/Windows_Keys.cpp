#include <map>
#include <Windows.h>
#include "Windows_Keys.h"

namespace Kek
{
	const std::map<int, int> stateToWindowsMap
	{
		{STATE_NONE, -1},
		{STATE_RELEASE, WM_KEYUP},
		{STATE_PRESS, WM_KEYDOWN},
		{STATE_REPEAT, -1},
		{STATE_CLICK, -1}
	};
	const std::map<int, int> WindowsToStateMap
	{
		{-1, STATE_NONE},
		{WM_KEYUP, STATE_RELEASE},
		{WM_KEYDOWN, STATE_PRESS},
	};

	const std::map<int, int> keyToWindowsMap
	{
		{KEY_NONE,-1},
		{MOUSE_1, VK_LBUTTON},
		{MOUSE_2, VK_RBUTTON},
		{MOUSE_3, VK_MBUTTON},
		{MOUSE_4, VK_XBUTTON1},
		{MOUSE_5, VK_XBUTTON2},
		{MOUSE_6, -1},
		{MOUSE_7, -1},
		{MOUSE_8, -1},
		{KEY_0,0X30},
		{KEY_1,0X31},
		{KEY_2,0X32},
		{KEY_3,0X33},
		{KEY_4,0X34},
		{KEY_5,0X35},
		{KEY_6,0X36},
		{KEY_7,0X37},
		{KEY_8,0X38},
		{KEY_9,0X39},
		{KEY_SPACE,VK_SPACE},
		{KEY_APOSTROPHE, VK_OEM_7},
		{KEY_COMMA, VK_OEM_COMMA},
		{ KEY_MINUS,VK_OEM_MINUS },
		{ KEY_PERIOD,VK_OEM_PERIOD },
		{ KEY_SLASH, VK_OEM_2 },
		{ KEY_SEMICOLON,VK_OEM_1 },
		{ KEY_EQUAL,VK_OEM_PLUS },
		{ KEY_LEFT_BRACKET,VK_OEM_4 },
		{ KEY_BACKSLASH,VK_OEM_5 },
		{ KEY_RIGHT_BRACKET,VK_OEM_6 },
		{ KEY_GRAVE_ACCENT,VK_OEM_3 },
		{ KEY_ESCAPE,VK_ESCAPE },
		{ KEY_ENTER,VK_RETURN },
		{ KEY_TAB,VK_TAB },
		{ KEY_BACKSPACE,VK_BACK },
		{ KEY_INSERT,VK_INSERT },
		{ KEY_DELETE,VK_DELETE },
		{ KEY_RIGHT,VK_RIGHT },
		{ KEY_LEFT,VK_LEFT },
		{ KEY_DOWN,VK_DOWN },
		{ KEY_UP,VK_UP },
		{ KEY_PAGE_UP,VK_PRIOR },
		{ KEY_PAGE_DOWN,VK_NEXT },
		{ KEY_HOME,VK_HOME },
		{ KEY_END,VK_END },
		{ KEY_CAPS_LOCK,VK_CAPITAL },
		{ KEY_SCROLL_LOCK,VK_SCROLL },
		{ KEY_NUM_LOCK,VK_NUMLOCK },
		{ KEY_PRINT_SCREEN,VK_SNAPSHOT },
		{ KEY_PAUSE,VK_PAUSE },
		{ KEY_F1,VK_F1 },
		{ KEY_F2,VK_F2 },
		{ KEY_F3,VK_F3 },
		{ KEY_F4,VK_F4 },
		{ KEY_F5,VK_F5 },
		{ KEY_F6,VK_F6 },
		{ KEY_F7,VK_F7 },
		{ KEY_F8,VK_F8 },
		{ KEY_F9,VK_F9 },
		{ KEY_F10,VK_F10 },
		{ KEY_F11,VK_F11 },
		{ KEY_F12,VK_F12 },
		{ KEY_F13,VK_F13 },
		{ KEY_F14,VK_F14 },
		{ KEY_F15,VK_F15 },
		{ KEY_F16,VK_F16 },
		{ KEY_F17,VK_F17 },
		{ KEY_F18,VK_F18 },
		{ KEY_F19,VK_F19 },
		{ KEY_F20,VK_F20 },
		{ KEY_F21,VK_F21 },
		{ KEY_F22,VK_F22 },
		{ KEY_F23,VK_F23 },
		{ KEY_F24,VK_F24 },
		{ KEY_A,0X41 },
		{ KEY_B,0X42 },
		{ KEY_C,0X43 },
		{ KEY_D,0X44 },
		{ KEY_E,0X45 },
		{ KEY_F,0X46 },
		{ KEY_G,0X47 },
		{ KEY_H,0X48 },
		{ KEY_I,0X49 },
		{ KEY_J,0X4A },
		{ KEY_K,0X4B },
		{ KEY_L,0X4C },
		{ KEY_M,0X4D },
		{ KEY_N,0X4E },
		{ KEY_O,0X4F },
		{ KEY_P,0X50 },
		{ KEY_Q,0X51 },
		{ KEY_R,0X52 },
		{ KEY_S,0X53 },
		{ KEY_T,0X54 },
		{ KEY_U,0X55 },
		{ KEY_V,0X56 },
		{ KEY_W,0X57 },
		{ KEY_X,0X58 },
		{ KEY_Y,0X59 },
		{ KEY_Z,0X5A },
		{ KEY_KP_0,VK_NUMPAD0 },
		{ KEY_KP_1,VK_NUMPAD1 },
		{ KEY_KP_2,VK_NUMPAD2 },
		{ KEY_KP_3,VK_NUMPAD3 },
		{ KEY_KP_4,VK_NUMPAD4 },
		{ KEY_KP_5,VK_NUMPAD5 },
		{ KEY_KP_6,VK_NUMPAD6 },
		{ KEY_KP_7,VK_NUMPAD7 },
		{ KEY_KP_8,VK_NUMPAD8 },
		{ KEY_KP_9,VK_NUMPAD9 },
		{ KEY_KP_DECIMAL,VK_DECIMAL },
		{ KEY_KP_DIVIDE,VK_DIVIDE },
		{ KEY_KP_MULTIPLY,VK_MULTIPLY },
		{ KEY_KP_SUBTRACT,VK_SUBTRACT },
		{ KEY_KP_ADD,VK_ADD },
		{ KEY_KP_ENTER,VK_RETURN },
		{ KEY_KP_EQUAL,VK_OEM_NEC_EQUAL },
		{ KEY_LEFT_SHIFT,VK_LSHIFT },
		{ KEY_LEFT_CONTROL,VK_LCONTROL },
		{ KEY_LEFT_ALT, VK_LMENU },
		{ KEY_LEFT_SUPER,VK_LWIN },
		{ KEY_RIGHT_SHIFT,VK_RSHIFT },
		{ KEY_RIGHT_CONTROL,VK_RCONTROL},
		{ KEY_RIGHT_ALT,VK_RMENU},
		{ KEY_RIGHT_SUPER,VK_RWIN},
		{ KEY_MENU,VK_MENU}
	};
	constexpr int a = 0xDD;
	const std::map<int, int> WindowsToKeyMap
	{
		{-1,KEY_NONE},
		{VK_LBUTTON, MOUSE_1},
		{VK_RBUTTON, MOUSE_2},
		{VK_MBUTTON, MOUSE_3},
		{VK_XBUTTON1, MOUSE_4},
		{VK_XBUTTON2, MOUSE_5},
		{0X30,KEY_0},
		{0X31,KEY_1},
		{0X32,KEY_2},
		{0X33,KEY_3},
		{0X34,KEY_4},
		{0X35,KEY_5},
		{0X36,KEY_6},
		{0X37,KEY_7},
		{0X38,KEY_8},
		{0X39,KEY_9},
		{VK_SPACE,KEY_SPACE},
		{VK_OEM_7,KEY_APOSTROPHE},
		{VK_OEM_COMMA,KEY_COMMA},
		{VK_OEM_MINUS,KEY_MINUS},
		{VK_OEM_PERIOD,KEY_PERIOD},
		{VK_OEM_2,KEY_SLASH},
		{VK_OEM_1,KEY_SEMICOLON},
		{VK_OEM_PLUS,KEY_EQUAL},
		{VK_OEM_4,KEY_LEFT_BRACKET},
		{VK_OEM_5,KEY_BACKSLASH},
		{VK_OEM_6,KEY_RIGHT_BRACKET},
		{VK_OEM_3,KEY_GRAVE_ACCENT},
		{VK_ESCAPE,KEY_ESCAPE},
		{VK_RETURN,KEY_ENTER},
		{VK_TAB,KEY_TAB},
		{VK_BACK,KEY_BACKSPACE},
		{VK_INSERT,KEY_INSERT},
		{VK_DELETE,KEY_DELETE},
		{VK_RIGHT,KEY_RIGHT},
		{VK_LEFT,KEY_LEFT},
		{VK_DOWN,KEY_DOWN},
		{VK_UP,KEY_UP},
		{VK_PRIOR,KEY_PAGE_UP},
		{VK_NEXT,KEY_PAGE_DOWN},
		{VK_HOME,KEY_HOME},
		{VK_END,KEY_END},
		{VK_CAPITAL,KEY_CAPS_LOCK},
		{VK_SCROLL,KEY_SCROLL_LOCK},
		{VK_NUMLOCK,KEY_NUM_LOCK},
		{VK_SNAPSHOT,KEY_PRINT_SCREEN},
		{VK_PAUSE,KEY_PAUSE},
		{VK_F1,KEY_F1},
		{VK_F2,KEY_F2},
		{VK_F3,KEY_F3},
		{VK_F4,KEY_F4},
		{VK_F5,KEY_F5},
		{VK_F6,KEY_F6},
		{VK_F7,KEY_F7},
		{VK_F8,KEY_F8},
		{VK_F9,KEY_F9},
		{VK_F10,KEY_F10},
		{VK_F11,KEY_F11},
		{VK_F12,KEY_F12},
		{VK_F13,KEY_F13},
		{VK_F14,KEY_F14},
		{VK_F15,KEY_F15},
		{VK_F16,KEY_F16},
		{VK_F17,KEY_F17},
		{VK_F18,KEY_F18},
		{VK_F19,KEY_F19},
		{VK_F20,KEY_F20},
		{VK_F21,KEY_F21},
		{VK_F22,KEY_F22},
		{VK_F23,KEY_F23},
		{VK_F24,KEY_F24},
		{0X41,KEY_A},
		{0X42,KEY_B},
		{0X43,KEY_C},
		{0X44,KEY_D},
		{0X45,KEY_E},
		{0X46,KEY_F},
		{0X47,KEY_G},
		{0X48,KEY_H},
		{0X49,KEY_I},
		{0X4A,KEY_J},
		{0X4B,KEY_K},
		{0X4C,KEY_L},
		{0X4D,KEY_M},
		{0X4E,KEY_N},
		{0X4F,KEY_O},
		{0X50,KEY_P},
		{0X51,KEY_Q},
		{0X52,KEY_R},
		{0X53,KEY_S},
		{0X54,KEY_T},
		{0X55,KEY_U},
		{0X56,KEY_V},
		{0X57,KEY_W},
		{0X58,KEY_X},
		{0X59,KEY_Y},
		{0X5A,KEY_Z},
		{VK_NUMPAD0,KEY_KP_0},
		{VK_NUMPAD1,KEY_KP_1},
		{VK_NUMPAD2,KEY_KP_2},
		{VK_NUMPAD3,KEY_KP_3},
		{VK_NUMPAD4,KEY_KP_4},
		{VK_NUMPAD5,KEY_KP_5},
		{VK_NUMPAD6,KEY_KP_6},
		{VK_NUMPAD7,KEY_KP_7},
		{VK_NUMPAD8,KEY_KP_8},
		{VK_NUMPAD9,KEY_KP_9},
		{VK_DECIMAL ,KEY_KP_DECIMAL},
		{VK_DIVIDE ,KEY_KP_DIVIDE},
		{VK_MULTIPLY ,KEY_KP_MULTIPLY},
		{VK_SUBTRACT ,KEY_KP_SUBTRACT},
		{VK_ADD ,KEY_KP_ADD},
		{VK_RETURN ,KEY_KP_ENTER},
		{VK_OEM_NEC_EQUAL ,KEY_KP_EQUAL},
		{VK_LSHIFT,KEY_LEFT_SHIFT},
		{VK_LCONTROL,KEY_LEFT_CONTROL},
		{VK_LMENU,KEY_LEFT_ALT},
		{VK_LWIN,KEY_LEFT_SUPER},
		{VK_RSHIFT,KEY_RIGHT_SHIFT},
		{VK_RCONTROL,KEY_RIGHT_CONTROL},
		{VK_RMENU,KEY_RIGHT_ALT},
		{VK_RWIN,KEY_RIGHT_SUPER},
		{VK_MENU,KEY_MENU}
	};

	int StateToWindows(int state)
	{
		auto search = stateToWindowsMap.find(state);
		if (search == stateToWindowsMap.end()) return -1;
		return search->second;
	}
	int WindowsToState(int WindowsState)
	{
		auto search = WindowsToStateMap.find(WindowsState);
		if (search == WindowsToStateMap.end()) return -1;
		return search->second;
	}

	int KeyToWindows(int key)
	{
		auto search = keyToWindowsMap.find(key);
		if (search == keyToWindowsMap.end()) return -1;
		return search->second;
	}
	int WindowsToKey(int WindowsKey)
	{
		auto search = WindowsToKeyMap.find(WindowsKey);
		if (search == WindowsToKeyMap.end()) return -1;
		return search->second;
	}
}