#include <map>
#include <Windows.h>
#include "Windows_Keys.h"

namespace Kek
{
	const std::map<int, int> stateToWindowsMap
	{
		{State_None, -1},
		{State_Release, WM_KEYUP},
		{State_Press, WM_KEYDOWN},
		{State_Repeat, -1},
		{State_Click, -1}
	};
	const std::map<int, int> WindowsToStateMap
	{
		{-1, State_None},
		{WM_KEYUP, State_Release},
		{WM_KEYDOWN, State_Press},
	};

	const std::map<int, int> keyToWindowsMap
	{
		{Key_None,-1},
		{Mouse_1, VK_LBUTTON},
		{Mouse_2, VK_RBUTTON},
		{Mouse_3, VK_MBUTTON},
		{Mouse_4, VK_XBUTTON1},
		{Mouse_5, VK_XBUTTON2},
		{Mouse_6, -1},
		{Mouse_7, -1},
		{Mouse_8, -1},
		{Key_0,0x30},
		{Key_1,0x31},
		{Key_2,0x32},
		{Key_3,0x33},
		{Key_4,0x34},
		{Key_5,0x35},
		{Key_6,0x36},
		{Key_7,0x37},
		{Key_8,0x38},
		{Key_9,0x39},
		{Key_Space,VK_SPACE},
		{Key_Apostrophe, VK_OEM_7},
		{Key_Comma, VK_OEM_COMMA},
		{ Key_Minus,VK_OEM_MINUS },
		{ Key_Period,VK_OEM_PERIOD },
		{ Key_Slash, VK_OEM_2 },
		{ Key_Semicolon,VK_OEM_1 },
		{ Key_Equal,VK_OEM_PLUS },
		{ Key_Left_Bracket,VK_OEM_4 },
		{ Key_Backslash,VK_OEM_5 },
		{ Key_Right_Bracket,VK_OEM_6 },
		{ Key_Grave_Accent,VK_OEM_3 },
		{ Key_Escape,VK_ESCAPE },
		{ Key_Enter,VK_RETURN },
		{ Key_Tab,VK_TAB },
		{ Key_Backspace,VK_BACK },
		{ Key_Insert,VK_INSERT },
		{ Key_Delete,VK_DELETE },
		{ Key_Right,VK_RIGHT },
		{ Key_Left,VK_LEFT },
		{ Key_Down,VK_DOWN },
		{ Key_Up,VK_UP },
		{ Key_Page_Up,VK_PRIOR },
		{ Key_Page_Down,VK_NEXT },
		{ Key_Home,VK_HOME },
		{ Key_End,VK_END },
		{ Key_Caps_Lock,VK_CAPITAL },
		{ Key_Scroll_Lock,VK_SCROLL },
		{ Key_Num_Lock,VK_NUMLOCK },
		{ Key_Print_Screen,VK_SNAPSHOT },
		{ Key_Pause,VK_PAUSE },
		{ Key_F1,VK_F1 },
		{ Key_F2,VK_F2 },
		{ Key_F3,VK_F3 },
		{ Key_F4,VK_F4 },
		{ Key_F5,VK_F5 },
		{ Key_F6,VK_F6 },
		{ Key_F7,VK_F7 },
		{ Key_F8,VK_F8 },
		{ Key_F9,VK_F9 },
		{ Key_F10,VK_F10 },
		{ Key_F11,VK_F11 },
		{ Key_F12,VK_F12 },
		{ Key_F13,VK_F13 },
		{ Key_F14,VK_F14 },
		{ Key_F15,VK_F15 },
		{ Key_F16,VK_F16 },
		{ Key_F17,VK_F17 },
		{ Key_F18,VK_F18 },
		{ Key_F19,VK_F19 },
		{ Key_F20,VK_F20 },
		{ Key_F21,VK_F21 },
		{ Key_F22,VK_F22 },
		{ Key_F23,VK_F23 },
		{ Key_F24,VK_F24 },
		{ Key_A,0x41 },
		{ Key_B,0x42 },
		{ Key_C,0x43 },
		{ Key_D,0x44 },
		{ Key_E,0x45 },
		{ Key_F,0x46 },
		{ Key_G,0x47 },
		{ Key_H,0x48 },
		{ Key_I,0x49 },
		{ Key_J,0x4A },
		{ Key_K,0x4B },
		{ Key_L,0x4C },
		{ Key_M,0x4D },
		{ Key_N,0x4E },
		{ Key_O,0x4F },
		{ Key_P,0x50 },
		{ Key_Q,0x51 },
		{ Key_R,0x52 },
		{ Key_S,0x53 },
		{ Key_T,0x54 },
		{ Key_U,0x55 },
		{ Key_V,0x56 },
		{ Key_W,0x57 },
		{ Key_X,0x58 },
		{ Key_Y,0x59 },
		{ Key_Z,0x5A },
		{ Key_KP_0,VK_NUMPAD0 },
		{ Key_KP_1,VK_NUMPAD1 },
		{ Key_KP_2,VK_NUMPAD2 },
		{ Key_KP_3,VK_NUMPAD3 },
		{ Key_KP_4,VK_NUMPAD4 },
		{ Key_KP_5,VK_NUMPAD5 },
		{ Key_KP_6,VK_NUMPAD6 },
		{ Key_KP_7,VK_NUMPAD7 },
		{ Key_KP_8,VK_NUMPAD8 },
		{ Key_KP_9,VK_NUMPAD9 },
		{ Key_KP_Decimal,VK_DECIMAL },
		{ Key_KP_Divide,VK_DIVIDE },
		{ Key_KP_Multiply,VK_MULTIPLY },
		{ Key_KP_Subtract,VK_SUBTRACT },
		{ Key_KP_Add,VK_ADD },
		{ Key_KP_Enter,VK_RETURN },
		{ Key_KP_Equal,VK_OEM_NEC_EQUAL },
		{ Key_Left_Shift,VK_LSHIFT },
		{ Key_Left_Control,VK_LCONTROL },
		{ Key_Left_Alt, VK_LMENU },
		{ Key_Left_Super,VK_LWIN },
		{ Key_Right_Shift,VK_RSHIFT }, 
		{ Key_Right_Control,VK_RCONTROL},
		{ Key_Right_Alt,VK_RMENU},
		{ Key_Right_Super,VK_RWIN},
		{ Key_Menu,VK_MENU}
	};
	constexpr int a = 0xDD;
	const std::map<int, int> WindowsToKeyMap
	{
		{-1,Key_None},
		{VK_LBUTTON, Mouse_1},
		{VK_RBUTTON, Mouse_2},
		{VK_MBUTTON, Mouse_3},
		{VK_XBUTTON1, Mouse_4},
		{VK_XBUTTON2, Mouse_5},
		{0x30,Key_0},
		{0x31,Key_1},
		{0x32,Key_2},
		{0x33,Key_3},
		{0x34,Key_4},
		{0x35,Key_5},
		{0x36,Key_6},
		{0x37,Key_7},
		{0x38,Key_8},
		{0x39,Key_9},
		{VK_SPACE,Key_Space},
		{VK_OEM_7,Key_Apostrophe},
		{VK_OEM_COMMA,Key_Comma},
		{VK_OEM_MINUS,Key_Minus},
		{VK_OEM_PERIOD,Key_Period},
		{VK_OEM_2,Key_Slash},
		{VK_OEM_1,Key_Semicolon},
		{VK_OEM_PLUS,Key_Equal},
		{VK_OEM_4,Key_Left_Bracket},
		{VK_OEM_5,Key_Backslash},
		{VK_OEM_6,Key_Right_Bracket},
		{VK_OEM_3,Key_Grave_Accent},
		{VK_ESCAPE,Key_Escape},
		{VK_RETURN,Key_Enter},
		{VK_TAB,Key_Tab},
		{VK_BACK,Key_Backspace},
		{VK_INSERT,Key_Insert},
		{VK_DELETE,Key_Delete},
		{VK_RIGHT,Key_Right},
		{VK_LEFT,Key_Left},
		{VK_DOWN,Key_Down},
		{VK_UP,Key_Up},
		{VK_PRIOR,Key_Page_Up},
		{VK_NEXT,Key_Page_Down},
		{VK_HOME,Key_Home},
		{VK_END,Key_End},
		{VK_CAPITAL,Key_Caps_Lock},
		{VK_SCROLL,Key_Scroll_Lock},
		{VK_NUMLOCK,Key_Num_Lock},
		{VK_SNAPSHOT,Key_Print_Screen},
		{VK_PAUSE,Key_Pause},
		{VK_F1,Key_F1},
		{VK_F2,Key_F2},
		{VK_F3,Key_F3},
		{VK_F4,Key_F4},
		{VK_F5,Key_F5},
		{VK_F6,Key_F6},
		{VK_F7,Key_F7},
		{VK_F8,Key_F8},
		{VK_F9,Key_F9},
		{VK_F10,Key_F10},
		{VK_F11,Key_F11},
		{VK_F12,Key_F12},
		{VK_F13,Key_F13},
		{VK_F14,Key_F14},
		{VK_F15,Key_F15},
		{VK_F16,Key_F16},
		{VK_F17,Key_F17},
		{VK_F18,Key_F18},
		{VK_F19,Key_F19},
		{VK_F20,Key_F20},
		{VK_F21,Key_F21},
		{VK_F22,Key_F22},
		{VK_F23,Key_F23},
		{VK_F24,Key_F24},
		{0x41,Key_A},
		{0x42,Key_B},
		{0x43,Key_C},
		{0x44,Key_D},
		{0x45,Key_E},
		{0x46,Key_F},
		{0x47,Key_G},
		{0x48,Key_H},
		{0x49,Key_I},
		{0x4A,Key_J},
		{0x4B,Key_K},
		{0x4C,Key_L},
		{0x4D,Key_M},
		{0x4E,Key_N},
		{0x4F,Key_O},
		{0x50,Key_P},
		{0x51,Key_Q},
		{0x52,Key_R},
		{0x53,Key_S},
		{0x54,Key_T},
		{0x55,Key_U},
		{0x56,Key_V},
		{0x57,Key_W},
		{0x58,Key_X},
		{0x59,Key_Y},
		{0x5A,Key_Z},
		{VK_NUMPAD0,Key_KP_0},
		{VK_NUMPAD1,Key_KP_1},
		{VK_NUMPAD2,Key_KP_2},
		{VK_NUMPAD3,Key_KP_3},
		{VK_NUMPAD4,Key_KP_4},
		{VK_NUMPAD5,Key_KP_5},
		{VK_NUMPAD6,Key_KP_6},
		{VK_NUMPAD7,Key_KP_7},
		{VK_NUMPAD8,Key_KP_8},
		{VK_NUMPAD9,Key_KP_9},
		{VK_DECIMAL ,Key_KP_Decimal},
		{VK_DIVIDE ,Key_KP_Divide},
		{VK_MULTIPLY ,Key_KP_Multiply},
		{VK_SUBTRACT ,Key_KP_Subtract},
		{VK_ADD ,Key_KP_Add},
		{VK_RETURN ,Key_KP_Enter},
		{VK_OEM_NEC_EQUAL ,Key_KP_Equal},
		{VK_LSHIFT,Key_Left_Shift},
		{VK_LCONTROL,Key_Left_Control},
		{VK_LMENU,Key_Left_Alt},
		{VK_LWIN,Key_Left_Super},
		{VK_RSHIFT,Key_Right_Shift},
		{VK_RCONTROL,Key_Right_Control},
		{VK_RMENU,Key_Right_Alt},
		{VK_RWIN,Key_Right_Super},
		{VK_MENU,Key_Menu}
	};

	int StateToWindows(int state) 
	{
		auto search = stateToWindowsMap.find(state);
		if(search == stateToWindowsMap.end()) return -1;
		return search->second;
	}
	int WindowsToState(int WindowsState)
	{
		auto search = WindowsToStateMap.find(WindowsState);
		if(search == WindowsToStateMap.end()) return -1;
		return search->second;
	}

	int KeyToWindows(int key)
	{
		auto search = keyToWindowsMap.find(key);
		if(search == keyToWindowsMap.end()) return -1;
		return search->second;
	}
	int WindowsToKey(int WindowsKey)
	{
		auto search = WindowsToKeyMap.find(WindowsKey);
		if(search == WindowsToKeyMap.end()) return -1;
		return search->second;
	}
}